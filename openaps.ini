[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[report "monitor/glucose-zoned.json"]
use = rezone
reporter = JSON
astimezone = False
date = display_time
adjust = missing
input = monitor/glucoseclean.json
device = tz
timezone = BST

[device "tz"]
vendor = openapscontrib.timezones
extra = tz.ini

[device "insulin_pump"]
vendor = openaps.vendors.medtronic
extra = insulin_pump.ini

[report "raw-pump/bg-targets-raw.json"]
device = insulin_pump
use = read_bg_targets
reporter = JSON

[report "settings/bg-targets.json"]
device = units
to = mg/dL
use = bg_targets
input = raw-pump/bg-targets-raw.json
reporter = JSON

[report "raw-pump/insulin-sensitivities-raw.json"]
device = insulin_pump
use = read_insulin_sensitivities
reporter = JSON

[report "settings/insulin-sensitivities.json"]
device = units
to = mg/dL
use = insulin_sensitivities
input = raw-pump/insulin-sensitivities-raw.json
reporter = JSON

[report "raw-pump/clock-raw.json"]
device = insulin_pump
use = read_clock
reporter = JSON

[report "monitor/clock.json"]
date = None
use = clock
adjust = missing
reporter = JSON
device = tz
input = raw-pump/clock-raw.json
astimezone = False

[report "monitor/temp-basal-status.json"]
device = insulin_pump
use = read_temp_basal
reporter = JSON

[report "oref0-predict/oref0.json"]
use = shell
oref0-iob = oref0-monitor/iob.json
temp-basal = monitor/temp-basal-status.json
reporter = JSON
json_default = True
oref0-profile = oref0-monitor/profile.json
device = determine-basal
remainder = 
glucose = oref0-monitor/glucose.json

[report "raw-pump/pump-history-raw.json"]
hours = 8.0
device = insulin_pump
use = iter_pump_hours
reporter = JSON

[report "monitor/pump-history.json"]
date = created_at end_at start_at dateString timestamp
use = rezone
adjust = missing
reporter = JSON
device = tz
input = raw-pump/pump-history.json
astimezone = False
oper = format_recent_pump_historyopenaps
json_default = True
remainder = report add monitor/pump-history.json JSON insulin_pump iter_pump
count = 100
timezone = 

[report "model.json"]
device = insulin_pump
use = model
reporter = JSON

[report "monitor/reservoir.json"]
device = insulin_pump
use = reservoir
reporter = JSON

[report "monitor/status.json"]
device = insulin_pump
use = read_status
reporter = JSON

[report "monitor/battery.json"]
device = insulin_pump
use = read_battery_status
reporter = JSON

[report "oref0-enacted/enacted-temp-basal.json"]
device = insulin_pump
input = oref0-predict/oref0.json
use = set_temp_basal
reporter = JSON

[report "settings/settings.json"]
device = oref0
remainder = copy-fresher raw-pump/settings.json
use = shell
json_default = True
reporter = JSON

[report "raw-pump/settings.json"]
device = insulin_pump
use = read_settings
reporter = JSON

[report "settings/selected-basal-profile.json"]
device = oref0
remainder = copy-fresher raw-pump/selected-basal-profile.json
use = shell
json_default = True
reporter = JSON

[report "raw-pump/selected-basal-profile.json"]
device = insulin_pump
use = read_selected_basal_profile
reporter = JSON

[report "raw-pump/temp-basal-status.json"]
device = insulin_pump
use = read_temp_basal
reporter = JSON

[report "raw-pump/reservoir.json"]
device = insulin_pump
use = reservoir
reporter = JSON

[report "raw-pump/status.json"]
device = insulin_pump
use = read_status
reporter = JSON

[report "raw-pump/battery.json"]
device = insulin_pump
use = read_battery_status
reporter = JSON

[report "last_four_pump_hours.json"]
device = insulin_pump
hours = 4.0
use = iter_pump_hours
reporter = JSON

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
timezone = 

[device "ns"]
vendor = openaps.vendors.process
extra = ns.ini

[alias]
rm-warmup = ! bash -c "ls -f model.json monitor/clock.json > /dev/null"
warmup = report invoke model.json raw-pump/clock-raw.json monitor/clock.json
fail-warmup = ! bash -c "echo PREFLIGHT FAIL; exit 1"
preflight = ! bash -c "ls -f monitor/clock.json && openaps report invoke monitor/clock.json 2>/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || (mm-stick warmup || sudo oref0-reset-usb; echo PREFLIGHT FAIL; sleep 120; exit 1)"
monitor-cgm = report invoke raw-pump/mm-glucose.json raw-pump/mm-glucose-cleaned.json raw-pump/ns-glucose.json monitor/glucose.json
monitor-pump-history = report invoke raw-pump/pump-history.json monitor/pump-history.json
get-basal-status = report invoke monitor/temp-basal-status.json
get-pump-details = report invoke monitor/reservoir.json monitor/status.json monitor/battery.json
get-settings = report invoke raw-pump/bg-targets-raw.json settings/bg-targets.json raw-pump/insulin-sensitivities-raw.json settings/insulin-sensitivities.json raw-pump/selected-basal-profile.json raw-pump/settings.json settings/selected-basal-profile.json settings/settings.json
gather-pump-data = ! bash -c "openaps get-basal-status; openaps get-pump-details; openaps monitor-pump-history;  openaps get-settings"
gather-clean-data = ! bash -c "openaps monitor-cgm && openaps gather-pump-data"
do-oref0 = report invoke oref0-monitor/glucose.json oref0-monitor/profile.json oref0-monitor/iob.json oref0-predict/oref0.json
enact-oref0 = report invoke oref0-enacted/enacted-temp-basal.json
do-everything = ! bash -c "(openaps preflight && openaps gather-clean-data && openaps do-oref0 && openaps enact-oref0);  openaps report-nightscout"
ping = ! bash -c "echo PONG! $*" --
pong = ! echo PONG
hello = ! echo hello
okbar = ! bash -c "echo $1" --
report-nightscout = report invoke monitor/clock-zoned.json nightscout/preflight.json nightscout/uploaded.json nightscout/recent-missing-entries.json nightscout/uploaded-entries.json
gather = ! bash -c "ls -f monitor/*; openaps get-profile && openaps monitor-cgm && openaps monitor-pump && openaps report invoke monitor/iob.json"
get-profile = report invoke settings/settings.json settings/bg_targets_raw.json settings/bg-targets.json settings/insulin-sensitivities-raw.json settings/insulin-sensitivities.json settings/basal-profile.json settings/profile.json
monitor-pump = report invoke monitor/clock.json monitor/temp_basal.json monitor/pumphistory.json monitor/iob.json
loop = ! bash -c "( openaps preflight && openaps gather && openaps enact) || echo LOOP FAILED."
determine-basal = report invoke enact/suggested.json
enact = report invoke enact/suggested.json enact/enacted.json
retry-loop = ! bash -c "openaps preflight && until( ! mm-stick warmup || openaps loop); do sleep 5; done"
backdate = use ns shell get entries/sgv.json count=300 | openaps use tz lsgaps --date dateString --minutes 6 --before yesterday --after now - | openaps use tz select --current now --date dateString --gaps - monitor/glucose.json | openaps use ns shell upload entries.json -

[report "nightscout/recent-treatments.json"]
oper = format-recent-history-treatments
use = shell
reporter = JSON
json_default = True
device = ns
remainder = monitor/pump-history.json model.json

[report "nightscout/uploaded.json"]
oper = upload-non-empty-treatments
use = shell
reporter = JSON
json_default = True
device = ns
remainder = nightscout/recent-treatments.json

[report "nightscout/recent-missing-entries.json"]
oper = format-recent-type
use = shell
reporter = JSON
json_default = True
device = ns
remainder = tz  entries monitor/glucose.json

[report "nightscout/uploaded-entries.json"]
oper = upload
use = shell
reporter = JSON
device = ns
remainder = entries.json nightscout/recent-missing-entries.json
json_default = True

[report "nightscout/preflight.json"]
oper = preflight
use = shell
reporter = JSON
device = ns
remainder = 
json_default = True

[report "settings/model.json"]
device = insulin_pump
use = model
reporter = JSON

[report "monitor/glucose.json"]
device = tz
count = 5
use = rezone
reporter = JSON
astimezone = True
date = dateString
adjust = missing
input = raw-pump/ns-glucose.json
timezone = 

[device "oref0"]
vendor = openaps.vendors.process
extra = oref0.ini

[device "get-profile"]
vendor = openaps.vendors.process
extra = get-profile.ini

[device "calculate-iob"]
vendor = openaps.vendors.process
extra = calculate-iob.ini

[device "determine-basal"]
vendor = openaps.vendors.process
extra = determine-basal.ini

[report "settings/bg_targets_raw.json"]
device = insulin_pump
use = read_bg_targets
reporter = JSON

[device "units"]
vendor = openaps.vendors.units
extra = units.ini

[report "settings/bg_targets.json"]
device = units
to = mg/dL
use = bg_targets
input = settings/bg_targets_raw.json
reporter = JSON

[report "settings/insulin_sensitivities.json"]
device = units
to = mg/dL
use = insulin_sensitivities
input = settings/insulin-sensitivities-raw.json
reporter = JSON

[report "settings/basal-profile.json"]
device = insulin_pump
use = read_basal_profile_std
reporter = JSON

[report "settings/profile.json"]
use = shell
bg-targets = settings/bg-targets.json
preferences = preferences.json
settings = settings/settings.json
basal-profile = settings/basal-profile.json
reporter = text
json_default = True
device = get-profile
remainder = 
insulin-sensitivities = settings/insulin-sensitivities.json

[report "monitor/pumphistory.json"]
device = insulin_pump
hours = 4.0
use = iter_pump_hours
reporter = JSON
count = 100

[report "monitor/iob.json"]
profile = settings/profile.json
use = shell
clock = monitor/clock.json
reporter = JSON
json_default = True
pumphistory = monitor/pumphistory.json
device = calculate-iob
remainder = 
oref0-profile = settings/profile.json

[report "monitor/temp_basal.json"]
device = insulin_pump
use = read_temp_basal
reporter = JSON

[report "enact/suggested.json"]
profile = settings/profile.json
use = shell
temp_basal = monitor/temp_basal.json
reporter = text
json_default = True
device = determine-basal
remainder = 
iob = monitor/iob.json
glucose = monitor/glucose-zoned.json
oref0-iob = monitor/iob.json
temp-basal = monitor/temp_basal.json
oref0-profile = settings/profile.json

[vendor "openapscontrib.glucosetools"]
path = .
module = openapscontrib.glucosetools

[device "glucose"]
vendor = openapscontrib.glucosetools
extra = glucose.ini

[report "monitor/glucoseclean.json"]
device = glucose
use = clean
infile = monitor/glucose.json
reporter = JSON

[report "nightscout/openaps-status.json"]
oper = monitor/clock.json
use = shell
reporter = JSON
json_default = True
device = ns
remainder = oref0-monitor/iob.json oref0-predict/oref0.json oref0-enacted/enacted-temp-basal.json monitor/battery.json monitor/reservoir.json monitor/status.json

[device "detect-sensitivity"]
vendor = openaps.vendors.process
extra = detect-sensitivity.ini

[report "settings/insulin-sensitivities-raw.json"]
device = insulin_pump
use = read_insulin_sensitivities
reporter = JSON

[report "enact/enacted.json"]
device = insulin_pump
input = enact/suggested.json
use = set_temp_basal
reporter = JSON

[device "mm-glucose-format"]
vendor = openaps.vendors.process
extra = mm-glucose-format.ini

[report "raw-pump/mm-glucose.json"]
device = insulin_pump
count = 288
use = iter_glucose
reporter = JSON

[report "raw-pump/ns-glucose.json"]
device = mm-glucose-format
remainder = raw-pump/mm-glucose.json
use = shell
json_default = True
reporter = JSON

[report "raw-pump/pump-history.json"]
device = insulin_pump
hours = 4.0
use = iter_pump_hours
reporter = JSON

[report "raw-pump/bg-targets.json"]
device = insulin_pump
use = read_bg_targets
reporter = JSON

[report "oref0-monitor/profile.json"]
insulin-sensitivities = settings/insulin-sensitivities.json
use = shell
settings = settings/settings.json
reporter = text
json_default = True
device = get-profile
bg-targets = settings/bg-targets.json
basal-profile = settings/selected-basal-profile.json
max-iob = max-iob.json
remainder = 

[report "oref0-monitor/iob.json"]
use = shell
clock = monitor/clock.json
reporter = text
json_default = True
pump-history = monitor/pump-history.json
oref0-profile = oref0-monitor/profile.json
device = calculate-iob
remainder = 

[report "oref0-monitor/glucose.json"]
device = tz
use = rezone
infile = monitor/glucose.json
reporter = JSON
astimezone = False
date = display_time
adjust = missing
input = raw-pump/mm-glucose-cleaned.json
timezone = 

[report "raw-pump/cleaned-glucose.json"]
device = glucose
use = clean
infile = raw-pump/mm-glucose.json
reporter = JSON

[report "raw-pump/mm-glucose-cleaned.json"]
device = glucose
use = clean
infile = raw-pump/mm-glucose.json
reporter = JSON

